// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite" // 确保这里是 sqlite
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id        String   @id @default(cuid())
  email     String   @unique // 邮箱，唯一
  password  String   // 存储哈希后的密码
  username  String   @unique // 用户名，唯一 (之前是 name String?)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folders      Folder[]
  notebooks    Notebook[]
  documents    Document[] // 用户直接创建的文档（如果适用）或通过笔记本间接拥有
  notes        Note[] // 用户直接创建的富文本笔记（如果适用）或通过笔记本间接拥有
  notePadNotes NotePadNote[] // 用户直接创建的普通笔记（如果适用）或通过笔记本间接拥有
  syncConfigs  SyncConfig[]
  settings     UserSettings? // 一对一关联到用户设置
}

// 用户设置模型 (示例：用于LLM、向量化等设置)
model UserSettings {
  id     String @id @default(cuid())
  userId String @unique // 关联到用户ID
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 存储 LLMSettings 对象
  llmSettings Json?

  // 存储 EmbeddingModelSettings 对象
  embeddingSettings Json?

  // 存储 RerankingSettings 对象
  rerankingSettings Json?

  // 存储 UISettings 对象
  uiSettings Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// 文件夹模型
model Folder {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  notebooks Notebook[] // 关联到多个笔记本

  userId String // 外键关联到用户
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // --- 添加这部分来实现父子文件夹关系 ---
  parentId  String?    // ? 表示可选，允许根文件夹的 parentId 为 null
  parent    Folder?    @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Folder[]   @relation("FolderHierarchy")
  // --- 添加结束 ---

  @@index([userId])
  @@index([parentId]) // 为 parentId 添加索引以优化查询
}

// 笔记本模型
model Notebook {
  id        String   @id @default(cuid()) // 主键，自动生成唯一ID
  title     String
  createdAt DateTime @default(now()) // 创建时间
  updatedAt DateTime @updatedAt // 更新时间

  documents Document[] // 关联到多个文档 (一对多关系)
  // notes     String? // 移除旧的简单 notes 字段，如果 NotePadNote 是替代品
  notePadNotes NotePadNote[] // 关联到多个普通笔记
  richNotes    Note[]        // 关联到多个新的富文本笔记

  folderId String? // 可选的文件夹ID
  folder   Folder? @relation(fields: [folderId], references: [id])

  userId String // 外键关联到用户
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([folderId])
  @@index([userId])
}

// 文档模型
model Document {
  id          String   @id @default(cuid())
  fileName    String
  status      String // 或者使用自定义枚举类型
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  textContent String? 

  mimeType      String?
  textChunks    String? 
  embeddings    Json? 
  statusMessage String?
  fileSize      Int 
  filePath      String? 
  isVectorized  Boolean  @default(false)

  notebookId String
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)

  // 直接关联到 User (如果文档可以独立于笔记本存在，或者为了方便查询)
  // 如果文档总是属于某个用户的某个笔记本，这个直接关联可能不是必需的，
  // 可以通过 notebook.user 来访问用户。但为了数据隔离，明确关联可能更好。
  userId String
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([notebookId])
  @@index([userId]) 
}

// 记事本笔记模型
model NotePadNote {
  id        String   @id @default(cuid())
  title     String?
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notebookId String
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade) // 关联到笔记本

  userId String // 外键关联到用户
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([notebookId])
  @@index([userId])
}

// 新的富文本笔记模型
model Note {
  id           String   @id @default(cuid())
  title        String?
  contentJson  Json?    
  contentHtml  String?  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  notebookId String
  notebook   Notebook @relation(fields: [notebookId], references: [id], onDelete: Cascade)

  userId String // 外键关联到用户
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([notebookId])
  @@index([userId])
}

// 同步配置模型
model SyncConfig {
  id       String  @id @default(cuid())
  name     String
  type     String 
  isActive Boolean @default(true)

  webdavUrl      String?
  webdavUsername String?
  webdavPassword String? 
  webdavPath     String?

  s3Region    String?
  s3Bucket    String?
  s3AccessKey String?
  s3SecretKey String? 
  s3Endpoint  String?
  s3Path      String?
  s3Acl       String?

  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String // 外键关联到用户
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
