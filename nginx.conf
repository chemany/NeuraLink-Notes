# 定义工作进程数，通常设置为CPU核心数。
worker_processes  1;

events {
    # 每个工作进程的最大连接数。
    worker_connections  1024;
}

http {
    # 引入MIME类型定义文件。
    include       mime.types;
    # 定义默认文件类型。
    default_type  application/octet-stream;

    # 开启高效文件传输模式。
    sendfile        on;
    # 保持长连接。
    keepalive_timeout  65;
    
    # 定义一个服务器块（Server Block）。
    server {
        # 让Nginx监听8081端口，因为您的80端口被占用了。
        listen       8081;
        # 定义服务器名，这里用localhost，因为它在本机运行。
        server_name  localhost;

        # 设置客户端最大上传文件大小为100MB
        client_max_body_size 100M;

        # ==================== 日历 API 代理规则 ====================
        # 匹配所有 /calendars/api/ 开头的请求。
        # 注意：~* 表示不区分大小写的正则匹配，^ 表示路径开头。
        location ~* ^/calendars/api/ {
            # 关键：重写URL，去掉/calendars/api前缀。
            # $1 捕获了 /calendars/api/ 后面的所有内容。
            rewrite ^/calendars/api/(.*)$ /$1 break;
            
            # 将重写后的请求代理到日历后端的11001端口。
            proxy_pass http://127.0.0.1:11001;

            # 设置一些必要的代理头信息，确保后端能正确识别请求。
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 添加 CORS 头信息支持
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            
            # 处理 OPTIONS 预检请求
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # ==================== 统一设置服务 API 代理规则 ====================
        # 健康检查特殊处理 - 直接代理到 /health
        location = /unified-settings/api/health {
            rewrite ^/unified-settings/api/health$ /health break;
            proxy_pass http://127.0.0.1:3002;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 匹配所有其他 /unified-settings/api/ 开头的请求。
        location ~* ^/unified-settings/api/ {
            # 关键：重写URL，去掉/unified-settings/api前缀。
            # $1 捕获了 /unified-settings/api/ 后面的所有内容。
            rewrite ^/unified-settings/api/(.*)$ /api/$1 break;
            
            # 将重写后的请求代理到统一设置服务的3002端口。
            proxy_pass http://127.0.0.1:3002;

            # 设置一些必要的代理头信息，确保后端能正确识别请求。
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 添加 CORS 头信息支持
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            
            # 处理 OPTIONS 预检请求
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # ==================== Next.js静态资源代理规则 ====================
        # 处理Next.js的字体文件
        location ~* ^/__nextjs_font/ {
            proxy_pass http://127.0.0.1:11000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 设置缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # 处理智能日历的其他静态资源（_next目录下的文件）
        location ~* ^/calendars/_next/static/ {
            proxy_pass http://127.0.0.1:11000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 设置缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # 处理智能日历的所有_next资源（包括CSS map等开发资源）
        location ~* ^/calendars/_next/ {
            proxy_pass http://127.0.0.1:11000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }



        # 处理Next.js静态资源（直接路径，无calendars前缀）
        # 重写到带calendars前缀的路径
        location ~* ^/_next/static/.*\.(css\.map|js\.map|css|js|woff|woff2|ttf|eot|svg|png|jpg|jpeg|gif|ico)$ {
            rewrite ^/_next/(.*)$ /calendars/_next/$1 break;
            proxy_pass http://127.0.0.1:11000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 为静态资源设置缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # 静默处理CSS source map请求（避免404错误）
        location ~* \.css\.map$ {
            return 204; # 返回空内容，不显示404错误
        }

        # 静默处理其他source map请求
        location ~* ^/__nextjs_source-map/ {
            return 204; # 返回空内容，不显示404错误  
        }

        # 静默处理Chrome开发工具请求
        location ~* ^/\.well-known/ {
            return 204; # 返回空内容，不显示404错误
        }

        # ==================== Next.js HMR WebSocket 代理规则 ====================
        # 专门处理 webpack 热重载的 WebSocket 连接
        location ~* ^/calendars/_next/webpack-hmr$ {
            proxy_pass http://127.0.0.1:11000;
            proxy_http_version 1.1;
            
            # WebSocket 升级头
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 标准代理头
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket特定设置
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
            
            # 禁用缓冲
            proxy_buffering off;
            proxy_request_buffering off;
        }

        # ==================== 日历前端页面代理规则 ====================
        # 匹配所有 /calendars/ 开头的请求。
        # 这个 location 块必须放在 API 规则的后面。
        location /calendars/ {
            # 直接将请求代理到日历前端的11000端口。
            # 注意：这里的IP是127.0.0.1，因为Nginx和日历应用都在同一台Windows机器上。
            proxy_pass http://127.0.0.1:11000;
            
            # 设置代理头信息。
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 支持 WebSocket 连接 (Next.js热重载)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
        }

        # ==================== 笔记本应用 API 代理规则 ====================
        # 匹配所有 /notepads/api/ 开头的请求（支持大小写）。
        # 注意：API规则必须放在前端页面规则的前面，确保优先匹配！
        location ~ ^/notepads/[Aa][Pp][Ii]/ {
            # 关键：重写URL，去掉/notepads/api前缀，保留api前缀给后端。
            # 因为后端使用了全局前缀 'api'，所以需要保留 /api/ 路径。
            rewrite ^/notepads/[Aa][Pp][Ii]/(.*)$ /api/$1 break;
            
            # 将重写后的请求代理到笔记本后端的3001端口。
            proxy_pass http://127.0.0.1:3001;

            # 设置一些必要的代理头信息，确保后端能正确识别请求。
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 添加 CORS 头信息支持
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            
            # 处理 OPTIONS 预检请求
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # ==================== 笔记本静态资源代理规则 ====================
        # 处理笔记本系统的Next.js静态资源
        location ~* ^/notepads/_next/ {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 设置缓存
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # ==================== 笔记本前端页面代理规则 ====================
        # 处理 /notepads 不带斜杠的情况
        location = /notepads {
            # 直接代理，不进行重定向
            proxy_pass http://127.0.0.1:3000;
            
            # 设置代理头信息。
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 关键：禁用nginx的重定向处理，让前端处理
            proxy_redirect off;
            proxy_buffering off;
        }
        
        # 匹配所有 /notepads/ 开头的请求（非API请求）。
        # 保持完整路径，因为前端设置了 basePath: '/notepads'
        location /notepads/ {
            # 直接代理，保持完整路径给前端处理
            # 前端的basePath会正确处理 /notepads/ 前缀
            proxy_pass http://127.0.0.1:3000;
            
            # 设置代理头信息。
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 支持 WebSocket 连接 (如果需要)
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 关键：禁用nginx的重定向处理，让前端处理
            proxy_redirect off;
            proxy_buffering off;
        }

        # ==================== 日历设置 API 代理规则 ====================
        # 匹配所有 /settings/ 开头的请求
        location ~* ^/settings/ {
            # 直接代理到智能日历后端，保持路径不变
            proxy_pass http://127.0.0.1:11001;

            # 设置一些必要的代理头信息，确保后端能正确识别请求。
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 添加 CORS 头信息支持
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
            
            # 处理 OPTIONS 预检请求
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin * always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain charset=UTF-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # ==================== 根路径处理 ====================
        # 处理直接访问 IP:8081 的请求。
        location = / {
            # 明确告诉浏览器返回的是HTML文本。
            default_type text/html;
            # 返回一段简单的HTML代码。
            return 200 '<!DOCTYPE html><html><head><title>Nginx Welcome</title></head><body><h1>Nginx is running.</h1><p>Available applications:</p><ul><li><a href="/calendars/">Calendar App</a></li><li><a href="/notepads/">Notebook LM Clone</a></li></ul></body></html>';
        }
        
        # 对于其他所有未匹配到的路径，都返回404错误。
        location / {
            return 404;
        }

    }
} 